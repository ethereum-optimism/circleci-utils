description: >
  Run changesets release.
parameters:
  setupGitUser:
    type: boolean
    default: true
    description: "Whether to setup git user"
  createGithubReleases:
    type: boolean
    default: false
    description: "Whether to create GitHub releases"
  publish:
    type: string
    default: ""
    description: "Command to run for publishing"
  version:
    type: string
    default: ""
    description: "Command to run for versioning"
  githubTokenName:
    type: env_var_name
    default: GITHUB_TOKEN_GOVERNANCE
    description: "Name of GitHub token environment variable containing a token with write permissions for the repository"
  githubReleaseRepository:
    type: string
    default: "${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}"
    description: "Name of github repository to which the release branches will be pushed. In the form of username/reponame"
steps:
  - run:
      name: Run the release action
      command: |
        # First we make sure we have node installed
        if ! [ -x "$(command -v node)" ]; then
          echo 'Missing node binary' >&2
          exit 1
        fi

        export INPUT_SETUPGITUSER=<< parameters.setupGitUser >>
        export INPUT_CREATEGITHUBRELEASES=<< parameters.createGithubReleases >>
        export INPUT_PUBLISH="<< parameters.publish >>"
        export INPUT_VERSION="<< parameters.version >>"

        export GITHUB_SHA="${CIRCLE_SHA1}"
        export GITHUB_REPOSITORY=<< parameters.githubReleaseRepository >>
        export GITHUB_SERVER_URL="https://github.com" 
        export GITHUB_API_URL="https://api.github.com" 
        export GITHUB_GRAPHQL_URL="https://api.github.com/graphql" 

       
        echo "INPUT_CREATEGITHUBRELEASES: $INPUT_CREATEGITHUBRELEASES"

        # Now we check that we have a github token
        export GITHUB_TOKEN="${<< parameters.githubTokenName >>}"
        if [ -z "$GITHUB_TOKEN" ]; then
            echo "Missing github token. Please make sure to authenticate to github before running the release command" >&2
            exit 1
        fi

        # make temp directory
        TEMP_DIR=$(mktemp -d)
        curl -L https://raw.githubusercontent.com/ethereum-optimism/circleci-utils/refs/heads/main/external_scripts/changesets/1.4.9/index.js -o $TEMP_DIR/index.js 

        # Some of the environment variables we need are not available as pipeline values



        # And populate the ref short & long names
        if [ -n "${CIRCLE_BRANCH}" ]; then
          export GITHUB_REF_NAME="${CIRCLE_BRANCH}"
          export GITHUB_REF="refs/heads/$GITHUB_REF_NAME"
        elif [ -n "${CIRCLE_TAG}" ]; then
          export GITHUB_REF_NAME="${CIRCLE_TAG}"
          export GITHUB_REF="refs/tags/$GITHUB_REF_NAME"
        else
          echo "Pipeline is not running for a branch or a tag" >&2
          exit 1
        fi


        # Setup an authenticated remote
        git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git

        # Run the changesets action by piping the script to node
        node $TEMP_DIR/index.js
