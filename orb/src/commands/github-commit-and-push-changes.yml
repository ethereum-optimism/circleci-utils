description: >
  This command commit and push a folder change to a specific repo/branch
parameters:
  repo:
    type: string
    default: "$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME"
    description: "The repository to create the issue in"
  branch:
    type: string
    default: $CIRCLE_BRANCH
    description: "Branch where to commit to"
  folder:
    type: string
    description: "Folder to commit"
  commit-message:
    type: string
    description: "Message to use"
    default: "Deploying to ${CIRCLE_BRANCH} from @ ${SOURCE_REPO}@${SOURCE_COMMIT} ðŸš€"
  commit-username:
    type: string
    description: "username to use for commit, if not specified the circleci user that triggered the event is used"
    default: ""
  commit-email:
    type: string
    description: "email to use for commit, if not specified <github-username-id>+<commit-username>@users.noreply.github.com will be used"
    default: ""
  skip-ci:
    type: boolean
    description: "Whether to skip CI checks"
    default: false
  condition:
    type: string
    default: "always"
    description: "The condition to run the command. 0 and always are considered true, everything else is false"
steps:
  - setup-circleci-utils-and-github-token
  - run:
      name: Commit and Push Changes
      command: |
        if [ "<< parameters.condition >>" != "always" ] && [ "<< parameters.condition >>" != "0" ]; then
          echo "Skipping command because condition is not met"
          exit 0
        fi

        token=$(cat $SECRET_ACCESS_TOKEN_FILE_PATH) 

        # Store the absolute path of the target folder
        TARGET_FOLDER=$(realpath "<< parameters.folder >>")

        # Check if the target folder is within a git repository
        if ! git -C "${TARGET_FOLDER}" rev-parse --git-dir > /dev/null 2>&1; then
          echo "Error: The specified folder '${TARGET_FOLDER}' is not within a git repository."
          exit 1
        fi

        if [ -z "<< parameters.commit-username >>" ]; then
          # Get the username of the user that triggered the event
          USERNAME=${CIRCLE_USERNAME}
        else
          USERNAME="<< parameters.commit-username >>"
        fi

        if [ -z "<< parameters.commit-email >>" ]; then
          # Extract the email from the user info
          ID=$(curl https://api.github.com/users/$USERNAME | jq -r '.id')
          USER_EMAIL="${ID}+${USERNAME}@users.noreply.github.com"
        else
          USER_EMAIL="<< parameters.commit-email >>"
        fi

        # Git operations with committer's identity
        git config --global user.name "${USERNAME}"
        git config --global user.email "${USER_EMAIL}"

        # Ensure we're in the git repository root
        cd "$(git rev-parse --show-toplevel)"

        # Fetch the target branch if it exists remotely
        if git ls-remote --heads origin "<< parameters.branch >>" | grep -q "<< parameters.branch >>"; then
          # Fetch the branch
          git fetch origin "<< parameters.branch >>"
          # Create new branch from the remote if it doesn't exist locally
          git checkout -B "<< parameters.branch >>" "origin/<< parameters.branch >>"
        else
          # Create new branch if it doesn't exist
          git checkout -b "<< parameters.branch >>"
        fi

        # Stage only the files from the target folder
        git add "${TARGET_FOLDER}"

        # Create commit if there are changes
        if git diff --staged --quiet; then
          echo "No changes to commit"
          exit 0
        fi

        echo "Committing changes..."
        git commit -m "${SKIP_CI}<< parameters.commit-message >>"

        SKIP_CI=""
        if [ "<< parameters.skip-ci >>" = true ]; then
          SKIP_CI="[skip ci] "
        fi

        git push "https://x-access-token:${token}@github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}.git" "<< parameters.branch >>"
