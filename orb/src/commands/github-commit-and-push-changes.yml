description: >
  This command commit and push a folder change to a specific repo/branch
parameters:
  repo:
    type: string
    default: "$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME"
    description: "The repository to create the issue in"
  branch:
    type: string
    default: $CIRCLE_BRANCH
    description: "Branch where to commit to"
  path:
    type: string
    description: "Path to the folder to commit, can be a directory or a file"
  commit-message:
    type: string
    description: "Message to use"
    default: "Deploying to ${CIRCLE_BRANCH} from @ ${SOURCE_REPO}@${SOURCE_COMMIT} ðŸš€"
  commit-username:
    type: string
    description: "username to use for commit, if not specified the circleci user that triggered the event is used"
    default: ""
  commit-email:
    type: string
    description: "email to use for commit, if not specified <github-username-id>+<commit-username>@users.noreply.github.com will be used"
    default: ""
  skip-ci:
    type: boolean
    description: "Whether to skip CI checks"
    default: false
  condition:
    type: string
    default: "always"
    description: "The condition to run the command. 0 and always are considered true, everything else is false"
steps:
  - setup-circleci-utils-and-github-token
  - run:
      name: Commit and Push Changes
      command: |
        if [ "<< parameters.condition >>" != "always" ] && [ "<< parameters.condition >>" != "0" ]; then
          echo "Skipping command because condition is not met"
          exit 0
        fi

        token=$(cat $SECRET_ACCESS_TOKEN_FILE_PATH) 

        if [ -z "<< parameters.commit-username >>" ]; then
          # Get the username of the user that triggered the event
          USERNAME=${CIRCLE_USERNAME}
        else
          USERNAME="<< parameters.commit-username >>"
        fi

        echo "USERNAME: $USERNAME"
        if [ -z "$USERNAME" ]; then
          echo "USERNAME is empty"
          exit 0
        fi

        if [ -z "<< parameters.commit-email >>" ]; then
          # Extract the email from the user info
          ID=$(curl https://api.github.com/users/$USERNAME | jq -r '.id')
          USER_EMAIL="${ID}+${USERNAME}@users.noreply.github.com"
        else
          USER_EMAIL="<< parameters.commit-email >>"
        fi

        if [ -z "$USER_EMAIL" ]; then
          echo "USER_EMAIL is empty"
          exit 0
        fi

        echo "USER_EMAIL: $USER_EMAIL"

        # Git operations with committer's identity
        git config --global user.name "${USERNAME}"
        git config --global user.email "${USER_EMAIL}"

        #get absolute path of the path
        AbsolutePath=$(realpath "single_file.txt")

        # create a temp directory to work in
        TempDir=$(mktemp -d)
        echo "TempDir: ${TempDir}"
        cd "${TempDir}"

        # Initialize git repository
        git init

        # Set remote and fetch all content
        git remote add origin "https://x-access-token:${token}@github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}.git"
        git fetch origin

        # Set up tracking branch
        git checkout -b "${CIRCLE_BRANCH}" "origin/${CIRCLE_BRANCH}"

        # copy the path to the temp directory
        cp -r "${AbsolutePath}" ./

        # Stage changes first
        git add . -n  # Dry run to show what would be added
        git add .

        # Create commit if there are changes
        if git diff --staged --quiet; then
          echo "No changes to commit"
          exit 0
        fi

        SKIP_CI=""
        if [ "false" = true ]; then
          SKIP_CI="[skip ci] "
        fi

        echo "Committing changes..."
        git commit -m "${SKIP_CI}Automated commit for single file $(date)"

        git push origin "$CIRCLE_BRANCH"

        # clean up the temp directory
        rm -rf "${TempDir}"
