description: >
  This command will run the issue-metrics tool to generate a markdown file with the metrics of the issues in the repository.
parameters:
  SEARCH_QUERY:
    description: "The search query to filter the issues"
    type: string
  docker-image:
    description: "The docker image to use for the issue-metrics tool"
    type: string
    default: "us-docker.pkg.dev/oplabs-tools-artifacts/images/issue-metrics@sha256:e2528e480083fab6bb81f3a926598e25e0ae44ef3cc94a1d5d9d270978189ffe"
  repo:
    type: string
    description: "The repository to create the issue in"
    default: "$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME"
  issue-title:
    type: string
    description: "The title of the issue"
  issue-labels:
    type: string
    description: "The labels to add to the issue"
  assignees:
    type: string
    description: "The assignees to add to the issue"
  condition:
    type: string
    default: "always"
    description: "The condition to run the command. 0 and always are considered true, everything else is false"
steps:
  - setup-circleci-utils-and-github-token
  - run:
      name: Run Issue-Metrics Tool
      command: |
        if [ "<< parameters.condition >>" != "always" ] && [ "<< parameters.condition >>" != "0" ] && [ "<< parameters.condition >>" != "true" ]; then
          echo "Skipping command because condition (<< parameters.condition >>) is not met"
          exit 0
        fi

        if [ "$(docker ps -aq -f name=issue-metrics-run)" ]; then
          docker rm -f issue-metrics-run
        fi

        FilePath=$(mktemp)
        echo "Running issue-metrics tool with the following parameters:"
        echo "SEARCH_QUERY: << parameters.SEARCH_QUERY >>"
        echo "file-path: $FilePath"
        echo "docker-image: << parameters.docker-image >>"
        echo "SECRET_ACCESS_TOKEN_FILE_PATH: $SECRET_ACCESS_TOKEN_FILE_PATH"
        
        token=$(cat $SECRET_ACCESS_TOKEN_FILE_PATH)

        # Using timestamp
        CONTAINER_NAME="issue-metrics-run-$(date +%s)"

        # Or using timestamp with random number
        CONTAINER_NAME="issue-metrics-run-$(date +%s)-$RANDOM"

        # Then use it in the commands
        if ! docker run --name "${CONTAINER_NAME}" -e SEARCH_QUERY="<< parameters.SEARCH_QUERY >>" -e GH_TOKEN="${token}" "<< parameters.docker-image >>"; then
            echo "No results found or error occurred"
        fi

        if ! docker cp "${CONTAINER_NAME}":/action/workspace/issue_metrics.md "${FilePath}"; then
            echo "Could not copy results file - container may not have generated any results"
        fi

        # Clean up container regardless of result
        docker rm "${CONTAINER_NAME}" || true

        #create the issue if the file is not empty
        if [ -s "${FilePath}" ]; then
          python $CIRCLECI_TOOLS_PATH create-issue-from-file \
            --github-token "${token}" \
            --repo "<< parameters.repo >>" \
            --file-path "${FilePath}" \
            --issue-title "<< parameters.issue-title >>" \
            --issue-labels "<< parameters.issue-labels >>" \
            --assignees "<< parameters.assignees >>"
        fi
