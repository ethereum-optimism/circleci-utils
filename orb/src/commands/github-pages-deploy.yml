description: >
  This command will take care to deploy the github pages.
parameters:
  src-pages-dir:
    type: string
    description: "path to the folder to deploy"
  pages-branch:
    type: string
    default: "gh-pages"
    description: "The branch to deploy to"
  force-push:
    type: boolean
    default: false
    description: "Whether to force push"
  condition:
    type: string
    default: "always"
    description: "The condition to run the command. 0 and always are considered true, everything else is false"
steps:
  - setup-circleci-utils-and-github-token
  - run:
      name: Deploy github pages
      command: |
        if [ "<< parameters.condition >>" != "always" ] && [ "<< parameters.condition >>" != "0" ]; then
          echo "Skipping command because condition is not met"
          exit 0
        fi

        token=$(cat $SECRET_ACCESS_TOKEN_FILE_PATH)

        # set up initial variables
        pages_branch="<< parameters.pages-branch >>"
        pages_folder=$(realpath "<< parameters.src-pages-dir >>")

        SOURCE_COMMIT=$(git rev-parse HEAD)
        SOURCE_REPO="${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}"

        USERNAME=${CIRCLE_USERNAME}

        # Extract the email from the user info
        ID=$(curl https://api.github.com/users/$USERNAME | jq -r '.id')
        USER_EMAIL="${ID}+${USERNAME}@users.noreply.github.com"

        # Git operations with committer's identity
        git config --global user.name "${USERNAME}"
        git config --global user.email "${USER_EMAIL}"

        #set up src directory
        src_dir=$(mktemp -d)
        cd $src_dir
        git init
        git remote add origin "https://x-access-token:${token}@github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}.git"

        if [ "<< parameters.force-push >>" = true ]; then
          # in case we are force pushing, we want a clean branch that we can push to
          echo "Creating orphan branch for to always have a clean history for ${pages_branch}"
          git checkout --orphan "${pages_branch}"
        else
          # Check if branch exists on remote
          if git ls-remote --heads origin "${pages_branch}" | grep -q "${pages_branch}"; then
              echo "Branch ${pages_branch} exists on remote, checking out..."
              git fetch origin "${pages_branch}"
              git checkout -b ${pages_branch} FETCH_HEAD
          else
              echo "Branch ${pages_branch} does not exist, creating..."
              git checkout --orphan "${pages_branch}"
          fi
        fi

        # Copy new files
        cp -a ${pages_folder}/. .

        # Commit and push
        git add .

        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Deploying to ${pages_branch} from @ ${SOURCE_REPO}@${SOURCE_COMMIT} ðŸš€"
          if [ "<< parameters.force-push >>" = true ]; then
            git push --set-upstream origin ${pages_branch} --force
          else
            git push --set-upstream origin ${pages_branch} 
          fi
        fi
